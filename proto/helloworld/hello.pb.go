// Code generated by protoc-gen-go.
// source: hello.proto
// DO NOT EDIT!

/*
Package helloworld is a generated protocol buffer package.

It is generated from these files:
	hello.proto

It has these top-level messages:
	ResponseCode
	HelloRequest
	HelloResponse
*/
package helloworld

import proto "uframework/message/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type ResponseCode struct {
	ErrCode    int32  `protobuf:"varint,10,opt,name=errCode" json:"errCode,omitempty"`
	ErrMessage string `protobuf:"bytes,20,opt,name=errMessage" json:"errMessage,omitempty"`
}

func (m *ResponseCode) Reset()                    { *m = ResponseCode{} }
func (m *ResponseCode) String() string            { return proto.CompactTextString(m) }
func (*ResponseCode) ProtoMessage()               {}
func (*ResponseCode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HelloRequest struct {
	Name string `protobuf:"bytes,10,opt,name=name" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type HelloResponse struct {
	Rc      *ResponseCode `protobuf:"bytes,10,opt,name=rc" json:"rc,omitempty"`
	Message string        `protobuf:"bytes,20,opt,name=message" json:"message,omitempty"`
}

func (m *HelloResponse) Reset()                    { *m = HelloResponse{} }
func (m *HelloResponse) String() string            { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()               {}
func (*HelloResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HelloResponse) GetRc() *ResponseCode {
	if m != nil {
		return m.Rc
	}
	return nil
}

func init() {
	proto.RegisterType((*ResponseCode)(nil), "helloworld.ResponseCode")
	proto.RegisterType((*HelloRequest)(nil), "helloworld.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "helloworld.HelloResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Greeter service

type GreeterClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeter service

type GreeterServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GreeterServer).SayHello(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x48, 0xcd, 0xc9,
	0xc9, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x02, 0x73, 0xca, 0xf3, 0x8b, 0x72, 0x52,
	0x94, 0x3c, 0xb8, 0x78, 0x82, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x9d, 0xf3, 0x53, 0x52,
	0x85, 0x24, 0xb8, 0xd8, 0x53, 0x8b, 0x8a, 0x40, 0x4c, 0x09, 0x2e, 0x05, 0x46, 0x0d, 0xd6, 0x20,
	0x18, 0x57, 0x48, 0x8e, 0x8b, 0x0b, 0xc8, 0xf4, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0x10,
	0x01, 0x4a, 0x72, 0x06, 0x21, 0x89, 0x28, 0x29, 0x71, 0xf1, 0x78, 0x80, 0xcc, 0x0d, 0x4a, 0x2d,
	0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x85, 0x18, 0xc3, 0x19, 0x04,
	0x66, 0x2b, 0x05, 0x73, 0xf1, 0x42, 0xd5, 0x40, 0xac, 0x14, 0xd2, 0xe0, 0x62, 0x2a, 0x4a, 0x06,
	0x2b, 0xe1, 0x36, 0x92, 0xd0, 0x43, 0xb8, 0x4b, 0x0f, 0xd9, 0x51, 0x41, 0x40, 0x35, 0x20, 0x87,
	0xe5, 0xa2, 0xd8, 0x0d, 0xe3, 0x1a, 0xf9, 0x70, 0xb1, 0xbb, 0x17, 0xa5, 0xa6, 0x96, 0xa4, 0x16,
	0x09, 0x39, 0x72, 0x71, 0x04, 0x27, 0x56, 0x82, 0xad, 0x10, 0x42, 0x31, 0x0e, 0xd9, 0x65, 0x52,
	0x92, 0x58, 0x64, 0x20, 0xb6, 0x29, 0x31, 0x24, 0xb1, 0x81, 0xc3, 0xc8, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0x0d, 0x51, 0x1b, 0xdc, 0x32, 0x01, 0x00, 0x00,
}
